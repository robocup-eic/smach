// Generated by gencpp from file cr3_moveit_control/cr3_pickRequest.msg
// DO NOT EDIT!


#ifndef CR3_MOVEIT_CONTROL_MESSAGE_CR3_PICKREQUEST_H
#define CR3_MOVEIT_CONTROL_MESSAGE_CR3_PICKREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace cr3_moveit_control
{
template <class ContainerAllocator>
struct cr3_pickRequest_
{
  typedef cr3_pickRequest_<ContainerAllocator> Type;

  cr3_pickRequest_()
    : geo_req()  {
    }
  cr3_pickRequest_(const ContainerAllocator& _alloc)
    : geo_req(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _geo_req_type;
  _geo_req_type geo_req;





  typedef boost::shared_ptr< ::cr3_moveit_control::cr3_pickRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cr3_moveit_control::cr3_pickRequest_<ContainerAllocator> const> ConstPtr;

}; // struct cr3_pickRequest_

typedef ::cr3_moveit_control::cr3_pickRequest_<std::allocator<void> > cr3_pickRequest;

typedef boost::shared_ptr< ::cr3_moveit_control::cr3_pickRequest > cr3_pickRequestPtr;
typedef boost::shared_ptr< ::cr3_moveit_control::cr3_pickRequest const> cr3_pickRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cr3_moveit_control::cr3_pickRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cr3_moveit_control::cr3_pickRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cr3_moveit_control::cr3_pickRequest_<ContainerAllocator1> & lhs, const ::cr3_moveit_control::cr3_pickRequest_<ContainerAllocator2> & rhs)
{
  return lhs.geo_req == rhs.geo_req;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cr3_moveit_control::cr3_pickRequest_<ContainerAllocator1> & lhs, const ::cr3_moveit_control::cr3_pickRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cr3_moveit_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cr3_moveit_control::cr3_pickRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cr3_moveit_control::cr3_pickRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cr3_moveit_control::cr3_pickRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cr3_moveit_control::cr3_pickRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cr3_moveit_control::cr3_pickRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cr3_moveit_control::cr3_pickRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cr3_moveit_control::cr3_pickRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e44f318b0f298d1b40a86ff55298e6ce";
  }

  static const char* value(const ::cr3_moveit_control::cr3_pickRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe44f318b0f298d1bULL;
  static const uint64_t static_value2 = 0x40a86ff55298e6ceULL;
};

template<class ContainerAllocator>
struct DataType< ::cr3_moveit_control::cr3_pickRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cr3_moveit_control/cr3_pickRequest";
  }

  static const char* value(const ::cr3_moveit_control::cr3_pickRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cr3_moveit_control::cr3_pickRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Pose geo_req\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::cr3_moveit_control::cr3_pickRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cr3_moveit_control::cr3_pickRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.geo_req);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cr3_pickRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cr3_moveit_control::cr3_pickRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cr3_moveit_control::cr3_pickRequest_<ContainerAllocator>& v)
  {
    s << indent << "geo_req: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.geo_req);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CR3_MOVEIT_CONTROL_MESSAGE_CR3_PICKREQUEST_H
