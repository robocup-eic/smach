// Generated by gencpp from file cr3_moveit_control/cr3_placeRequest.msg
// DO NOT EDIT!


#ifndef CR3_MOVEIT_CONTROL_MESSAGE_CR3_PLACEREQUEST_H
#define CR3_MOVEIT_CONTROL_MESSAGE_CR3_PLACEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace cr3_moveit_control
{
template <class ContainerAllocator>
struct cr3_placeRequest_
{
  typedef cr3_placeRequest_<ContainerAllocator> Type;

  cr3_placeRequest_()
    : corner11()
    , corner12()
    , corner21()
    , corner22()
    , high()  {
    }
  cr3_placeRequest_(const ContainerAllocator& _alloc)
    : corner11(_alloc)
    , corner12(_alloc)
    , corner21(_alloc)
    , corner22(_alloc)
    , high(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _corner11_type;
  _corner11_type corner11;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _corner12_type;
  _corner12_type corner12;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _corner21_type;
  _corner21_type corner21;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _corner22_type;
  _corner22_type corner22;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _high_type;
  _high_type high;





  typedef boost::shared_ptr< ::cr3_moveit_control::cr3_placeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cr3_moveit_control::cr3_placeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct cr3_placeRequest_

typedef ::cr3_moveit_control::cr3_placeRequest_<std::allocator<void> > cr3_placeRequest;

typedef boost::shared_ptr< ::cr3_moveit_control::cr3_placeRequest > cr3_placeRequestPtr;
typedef boost::shared_ptr< ::cr3_moveit_control::cr3_placeRequest const> cr3_placeRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cr3_moveit_control::cr3_placeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cr3_moveit_control::cr3_placeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cr3_moveit_control::cr3_placeRequest_<ContainerAllocator1> & lhs, const ::cr3_moveit_control::cr3_placeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.corner11 == rhs.corner11 &&
    lhs.corner12 == rhs.corner12 &&
    lhs.corner21 == rhs.corner21 &&
    lhs.corner22 == rhs.corner22 &&
    lhs.high == rhs.high;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cr3_moveit_control::cr3_placeRequest_<ContainerAllocator1> & lhs, const ::cr3_moveit_control::cr3_placeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cr3_moveit_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cr3_moveit_control::cr3_placeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cr3_moveit_control::cr3_placeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cr3_moveit_control::cr3_placeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cr3_moveit_control::cr3_placeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cr3_moveit_control::cr3_placeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cr3_moveit_control::cr3_placeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cr3_moveit_control::cr3_placeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d978d387de4218f75eb648950c639186";
  }

  static const char* value(const ::cr3_moveit_control::cr3_placeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd978d387de4218f7ULL;
  static const uint64_t static_value2 = 0x5eb648950c639186ULL;
};

template<class ContainerAllocator>
struct DataType< ::cr3_moveit_control::cr3_placeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cr3_moveit_control/cr3_placeRequest";
  }

  static const char* value(const ::cr3_moveit_control::cr3_placeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cr3_moveit_control::cr3_placeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point corner11\n"
"geometry_msgs/Point corner12\n"
"geometry_msgs/Point corner21\n"
"geometry_msgs/Point corner22\n"
"geometry_msgs/Point high\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::cr3_moveit_control::cr3_placeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cr3_moveit_control::cr3_placeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.corner11);
      stream.next(m.corner12);
      stream.next(m.corner21);
      stream.next(m.corner22);
      stream.next(m.high);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cr3_placeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cr3_moveit_control::cr3_placeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cr3_moveit_control::cr3_placeRequest_<ContainerAllocator>& v)
  {
    s << indent << "corner11: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.corner11);
    s << indent << "corner12: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.corner12);
    s << indent << "corner21: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.corner21);
    s << indent << "corner22: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.corner22);
    s << indent << "high: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.high);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CR3_MOVEIT_CONTROL_MESSAGE_CR3_PLACEREQUEST_H
