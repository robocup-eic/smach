// Generated by gencpp from file tesr_ros_cr3_pkg/VisualServoRequest.msg
// DO NOT EDIT!


#ifndef TESR_ROS_CR3_PKG_MESSAGE_VISUALSERVOREQUEST_H
#define TESR_ROS_CR3_PKG_MESSAGE_VISUALSERVOREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tesr_ros_cr3_pkg
{
template <class ContainerAllocator>
struct VisualServoRequest_
{
  typedef VisualServoRequest_<ContainerAllocator> Type;

  VisualServoRequest_()
    : trigger(false)  {
    }
  VisualServoRequest_(const ContainerAllocator& _alloc)
    : trigger(false)  {
  (void)_alloc;
    }



   typedef uint8_t _trigger_type;
  _trigger_type trigger;





  typedef boost::shared_ptr< ::tesr_ros_cr3_pkg::VisualServoRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tesr_ros_cr3_pkg::VisualServoRequest_<ContainerAllocator> const> ConstPtr;

}; // struct VisualServoRequest_

typedef ::tesr_ros_cr3_pkg::VisualServoRequest_<std::allocator<void> > VisualServoRequest;

typedef boost::shared_ptr< ::tesr_ros_cr3_pkg::VisualServoRequest > VisualServoRequestPtr;
typedef boost::shared_ptr< ::tesr_ros_cr3_pkg::VisualServoRequest const> VisualServoRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tesr_ros_cr3_pkg::VisualServoRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tesr_ros_cr3_pkg::VisualServoRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tesr_ros_cr3_pkg::VisualServoRequest_<ContainerAllocator1> & lhs, const ::tesr_ros_cr3_pkg::VisualServoRequest_<ContainerAllocator2> & rhs)
{
  return lhs.trigger == rhs.trigger;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tesr_ros_cr3_pkg::VisualServoRequest_<ContainerAllocator1> & lhs, const ::tesr_ros_cr3_pkg::VisualServoRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tesr_ros_cr3_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tesr_ros_cr3_pkg::VisualServoRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tesr_ros_cr3_pkg::VisualServoRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tesr_ros_cr3_pkg::VisualServoRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tesr_ros_cr3_pkg::VisualServoRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tesr_ros_cr3_pkg::VisualServoRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tesr_ros_cr3_pkg::VisualServoRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tesr_ros_cr3_pkg::VisualServoRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f6d1152a533bdef9ec687318c8e489b0";
  }

  static const char* value(const ::tesr_ros_cr3_pkg::VisualServoRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf6d1152a533bdef9ULL;
  static const uint64_t static_value2 = 0xec687318c8e489b0ULL;
};

template<class ContainerAllocator>
struct DataType< ::tesr_ros_cr3_pkg::VisualServoRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tesr_ros_cr3_pkg/VisualServoRequest";
  }

  static const char* value(const ::tesr_ros_cr3_pkg::VisualServoRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tesr_ros_cr3_pkg::VisualServoRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool trigger\n"
;
  }

  static const char* value(const ::tesr_ros_cr3_pkg::VisualServoRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tesr_ros_cr3_pkg::VisualServoRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.trigger);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VisualServoRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tesr_ros_cr3_pkg::VisualServoRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tesr_ros_cr3_pkg::VisualServoRequest_<ContainerAllocator>& v)
  {
    s << indent << "trigger: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.trigger);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TESR_ROS_CR3_PKG_MESSAGE_VISUALSERVOREQUEST_H
